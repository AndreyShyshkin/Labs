<html>
<head>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
<link rel="stylesheet" type="text/css" href="../../style.css">
</head>

<body>
<a name="top"></a>
<h1><b>11. Текстові та бінарні файли</b>
</h1>
<em>Мета  роботи:</em>
<ol>
  <li>Вивчити особливості  використання&nbsp; текстових і бінарних файлів</li>
  <li>Навчитися застосовувати текстові  та бінарні файли в&nbsp; програмуванні</li>
</ol>
<h2>11.1. Теоретичні відомості</h2>
<h3><span style="color: #00C">11.1.1. Відкриття та закриття  текстових файлів</span><br>
</h3>
<p>Текстовий файл є  сукупністю символьних рядків змінної довжини. Кожен рядок завершується <em>маркером  кінця рядка</em> &mdash; спеціальною парою керуючих символів,  коди яких: 13 (повернення каретки) та 10 (переведення рядка). Наприкінці файла  записується <em>маркер кінця файла</em>&mdash; керуючий символ з кодом 26. <br>
Відкриття файла  здійснюється функцією fopen(). Її прототип оголошено так:<br>
FILE *fopen(<span class="light">const char</span> *filename, <span class="light">const char</span> *mode);<br>
Функція має такі  параметри: filename &mdash; рядковий вираз, значенням якого має  бути ім&rsquo;я фізичного файла;&nbsp; mode &mdash; рядковий вираз, значенням якого є режим доступу до файла. Другий  параметр функції fopen()задає режим доступу до файла та може  приймати такі значення: &quot;r&quot;&nbsp;  &mdash;&nbsp; відкрити файл для читання; &quot;w&quot; &mdash;&nbsp; створити  новий файл для запису;&nbsp;&nbsp;&nbsp; &quot;a&quot; &mdash; відкрити файл для додавання даних у кінець  файла або створити новий файл, якщо він не існує; &quot;r+&quot; &mdash;  відкрити існуючий файл для читання та запису; &quot;w+&quot;  &mdash;&nbsp; створити новий файл для запису та  читання;&quot;a+&quot; &mdash;&nbsp;  відкрити файл в режимі читання та запису для додавання нових даних в  кінець файла або створити новий файл, якщо він не існує.<br>
Файли  закриваються функцією fclose(): <br>
fclose(&lt;покажчик на  файл&gt;); <br>
Функція&nbsp; fclose() повертає значення нуль у разі успішного  закриття файла або EOF, якщо виникла помилка</p>
</p>
<h3 style="color: #00C">11.1.2. Зчитування і запис  текстових файлів </h3>
<p>Зчитування  окремих символів із текстового файла здійснюється функцією fgetc(), яка має прототип:<br>
  <span class="light">int</span> fgetc(FILE *stream);<br>
<br>Зчитування  текстового файла по рядках має такий прототип:<br>
<span class="light">char</span> *fgets(<span class="light">char</span> *str,  <span class="light">int</span> n, FILE *stream);<br>
Тут str &mdash;&nbsp; буфер, в якому запам&rsquo;ятовується  зчитаний з файла рядок, заданий як покажчик на тип char; n &mdash;  максимальна кількість зчитаних символів; stream &mdash; покажчик  на файл, з якого зчитується рядок.<br>
<br>У мовах С/С++  означені функції fputc(), fputs(), що здійснюють запис символів і рядків.  Вони мають такі прототипи:<br>
<span class="light">int</span> fputc(<span class="light">int</span> c, FILE  *stream);<br>
<span class="light">int</span> fputs(<span class="light">const char</span> *str, FILE *stream);<br>
Тут c &mdash;&nbsp; символ, який записують до файла; stream &mdash; покажчик на файл; str &mdash; покажчик на рядок, який записують до  текстового файла. <br>
<br>Функції зчитування  текстових файлів за форматом, який визначає тип значення, що його функція має  повернути:<br>
<span class="light">int</span> fscanf (FILE  *stream, <span class="light">const char</span> *format [,argument ]...);<br>
<span class="light">int</span> fprintf(FILE *stream, <span class="light">const char</span> *format [,argument ]...);<br>
Функції мають  параметри: stream &mdash; покажчик на текстовий файл; format &mdash; покажчик на рядок формату, який задає правила перетворення символів; argument &mdash; адреси аргументів, що посилаються на змінні програми.<br>
<br>Для зчитування з  файла всіх даних потрібно використовувати функцію feof(), яка  визначає, чи досягнуто кінця файла:<br>
<span class="light">int</span> feof(FILE *stream);</p>

<h3><span style="color: #00C">11.1.3. Читання та запис бінарних  файлів&nbsp; </span><br>
</h3>
<p>Під час відкриття  бінарних файлів викликають функцію fopen(), проте&nbsp;  вказують режим бінарної обробки: &quot;rb&quot; &mdash;  тільки зчитування, &quot;wb&quot; &mdash; тільки запис, &quot;ab&quot;&mdash; доповнення в кінець, &quot;r+b&quot; і &quot;w+b&quot; позначають режим запису та зчитування. <br>
  <br />Приклад відкриття  бінарного файлу &quot;MyFile.dat&quot; з покажчиком FILE* fp<br>
  fp=fopen(&quot;MyFile.dat&quot;,&quot;r+b&quot;);<br>
  Прототипи функцій  зчитування та запису в бінарні файли є такими:<br>
  size_t fread(<span class="light">void</span> *buffer, size_t size, size_t count, FILE *stream);<br>
  size_t fwrite(<span class="light">const void</span> *buffer, size_t size,size_t count,FILE *stream);<br /><br />
Тут buffer &mdash; адреса змінної, з якої байти копіюються на диск під час виклику fwrite(), або адреса змінної, в яку байти зчитуються під час виклику fread();&nbsp; size &mdash; кількість  байтів, що виділені під змінну; count &mdash; кількість елементів розміру size, що записуються на диск або зчитуються з диска; stream &mdash; покажчик на файловий потік, відкритий у бінарному режимі.</p>
<h3>
  <b style="color: #00C">11.1.4. Прямий доступ до  компонентів бінарних файлів</b><br>
  
</h3>
<p>Наведені далі  функції мов С/C++ реалізують прямий метод доступу.<br>
Функція fgetpos() зберігає позицію файлового покажчика у змінній, що адресується другим  параметром. Значення позиції файлового покажчика дорівнює&nbsp; зміщенню в байтах від початку файла до  позиції, з якої має розпочатися наступна операція введення-виведення. Прототип  функції такий: <br>
<span class="light">int</span> fgetpos(FILE  *stream, fpos_t *pos);<br>
Аргументи: stream &mdash; покажчик на файловий потік; pos &mdash; покажчик на поточну позицію у файлі;  тип fpos_t є перейменуванням (аліасом) типу long. У разі успішного виклику функції вона повертає значення нуль, інакше &mdash;  -1.<br>
<br>Функція fsetpos() відновлює позицію файлового покажчика, встановлюючи його рівним значенню,  що його отримала функція fgetpos(). Параметри функції fsetpos() аналогічні розглянутим вище, значення pos визначається  попереднім викликом fgetpos(). Функція повертає значення нуль, якщо її  робота успішна та ненульове значення в разі помилки. Прототип функції fsetpos() оголошений так:<br>
<span class="light">int</span> fsetpos(FILE  *stream, <span class="light">const</span> fpos_t *pos);<br>
<br>Отримати поточну  позицію файлового покажчика, яка згодом використовуватиметься для  переміщення&nbsp; файлового покажчика на  потрібний байт, можна за допомогою функції ftell() з  прототипом:<br>
<span class="light">long</span> ftell( FILE  *stream);<br>
<br>Функція ftell() повертає позицію файлового покажчика. Значення , що його повертає  функція&nbsp; ftell(), слід  передати у функцію fseek(), яка переміщує файловий покажчик на певну  кількість байтів вперед по файлу (від його початку) або назад (від його кінця).  <br>
<br>Функція fseek() має такий прототип:
<br><span class="light">int</span> fseek( FILE  *stream,&nbsp; <span class="light">long</span> offset,&nbsp; <span class="light">int</span> origin);<br>
Тут stream &mdash; покажчик на тип FILE; offset &mdash; кількість  байтів, на які слід перемістити файловий покажчик даних у напрямку, що вказаний  третім параметром; origin &mdash; напрям переміщення файлового покажчика,  задається константами:<br>
SEEK_SET для переміщення файлового покажчика в  напрямку від початку файла, <br>
SEEK_END для переміщення файлового покажчика в  напрямку від кінця файла, <br>
SEEK_ CUR для переміщення  файлового покажчика відносно його поточної позиції.
</p>

<h3>
  <b style="color: #00C">11.1.5. Класи потоків для роботи з файлами </b><br>
  </h3>


<p><a href="#top">Вверх</a></p>
</body>
</html>